"""
def _repr_termTD(self, m):
        r
        data = ['1', 'i', 'j', 'k', 'l', 'il', 'jl', 'kl']
        return data[m]
O=OctonionAlgebra(SR)
OctonionAlgebra._repr_term=_repr_termTD
i=O.basis()[1]
j=O.basis()[2]
k=O.basis()[3]
l=O.basis()[4]
il=O.basis()[5]
jl=O.basis()[6]
kl=O.basis()[7]
a=-1
b=-1
c=-1
d=a*b
e=a*c
f=b*c
g=a*b*c
O._mult_table = (
          ((0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)),
          ((1, 1), (0, a), (3, 1), (2, a), (5, 1), (4, a), (7, -1), (6, -a)),
          ((2, 1), (3, -1), (0, b), (1, -b), (6, 1), (7, 1), (4, b), (5, b)),
          ((3, 1), (2, -a), (1, b), (0, -d), (7, 1), (6, a), (5, -b), (4, -d)),
          ((4, 1), (5, -1), (6, -1), (7, -1), (0, c), (1, -c), (2, -c), (3, -c)),
          ((5, 1), (4, -a), (7, -1), (6, -a), (1, c), (0, -e), (3, c), (2, e)),
          ((6, 1), (7, 1), (4, -b), (5, b), (2, c), (3, -c), (0, -f), (1, -f)),
          ((7, 1), (6, a), (5, -b), (4, d), (3, c), (2, -e), (1, f), (0, g)),
        )
class VariableGenerator(object):
    def __init__(self, prefix):
        self.__prefix = prefix
    @cached_method
    def __getitem__(self, key):
        return SR.var("%s%s"%(self.__prefix,key)) 
x=VariableGenerator('x')
y=VariableGenerator('y')
z=VariableGenerator('z')
ox=sum(x[m]*O.basis()[m] for m in range(8))
oy=sum(y[m]*O.basis()[m] for m in range(8))
oz=sum(z[m]*O.basis()[m] for m in range(8))

pretty_print_default(True)

print("Initialization loaded")
"""
